<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="warning"/>
    <!-- Checks for size violations.  -->
    <module name="FileLength">
        <property name="max" value="2500"/>
    </module>

    <!-- Checks that property files contain the same keys. -->
    <!--
    <module name="translation"/>
    -->

    <module name="TreeWalker">
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/>
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <!--
        <module name="EmptyForIteratorPad"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>
        -->

        <!--
        <module name="JavadocType">
            <property name="authorFormat" value="\S"/>
            <property name="tokens" value="CLASS_DEF,INTERFACE_DEF"/>
            <property name="scope" value="protected"/>
            <property name="excludeScope" value=""/>
            <property name="versionFormat" value="" />
        </module>
        -->

        <!--
        <module name="JavadocMethod">
            <property name="scope" value="private"/>
            <property name="allowMissingParamTags" value="false"/>
            <property name="allowMissingThrowsTags" value="false"/>
            <property name="allowMissingReturnTag" value="false"/>
            <property name="tokens" value="METHOD_DEF"/>
            <property name="allowUndeclaredRTE" value="true"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
            <property name="allowMissingPropertyJavadoc" value="true"/>
        </module>
        -->

        <!--
        <module name="JavadocVariable">
            <property name="scope" value="private"/>
        </module>
        -->

        <!-- Check the placement of left curly ('{'):
            eol, At same line with code
            nl, At next line with code -->
        <module name="LeftCurly">
            <property name="option" value="eol"/>
            <!--
            <property name="maxLineLength" value=""/>
            <property name="tokens" value=""/>
            -->
        </module>

        <!-- Check if curly is needed -->
        <module name="NeedBraces">
            <!--
            <property name="tokens" value=""/>
            -->
        </module>

        <!-- Checks the placement of right curly braces ('}') for else, try, and catch tokens.
             The policy to verify is specified using property option -->
        <module name="RightCurly">
            <property name="option" value="alone"/>
        </module>

        <!-- Check if has hashCode method when equals method has been override -->
        <module name="EqualsHashCode"/>

        <!-- Checks for illegal instantiations where a factory method is preferred.
             Rationale: Depending on the project, for some classes it might be preferable to create instances
                        through factory methods rather than calling the constructor.
                        A simple example is the java.lang.Boolean class. In order to save memory and CPU
                        cycles, it is preferable to use the predefined constants TRUE and FALSE. Constructor
                        invocations should be replaced by calls to Boolean.valueOf().
                        Some extremely performance sensitive projects may require the use of factory methods
                        for other classes as well, to enforce the usage of number caches or object pools.-->
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean"/>
        </module>

        <!-- Checks for Naming Conventions. -->
        <!-- local, final variables, including catch parameters -->
        <module name="LocalFinalVariableName"/>

        <!-- local, non-final variables, including catch parameters-->
        <module name="LocalVariableName"/>

        <!-- static, non-final fields -->
        <module name="StaticVariableName">
            <property name="format" value="(^[A-Z0-9_]{0,19}$)"/>
        </module>

        <!-- packages -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>

        <!-- classes and interfaces -->
        <module name="TypeName">
            <property name="format" value="(^[A-Z][a-zA-Z0-9]{0,19}$)"/>
        </module>

        <!-- methods -->
        <module name="MethodName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]{0,19}$)"/>
        </module>

        <!-- non-static fields -->
        <module name="MemberName">
            <property name="format" value="(^[a-z][a-z0-9][a-zA-Z0-9]{0,19}$)"/>
        </module>

        <!-- parameters -->
        <module name="ParameterName">
            <property name="format" value="(^[a-z][a-zA-Z0-9_]{0,19}$)"/>
        </module>

        <!-- constants (static,  final fields) -->
        <module name="ConstantName">
            <property name="format" value="(^[A-Z0-9_]{0,19}$)"/>
        </module>

        <!-- Indentation
        <module name="Indentation"/>
        -->

        <!-- Checks for redundant exceptions declared in throws clause such as duplicates,
             unchecked exceptions or subclasses of another declared exception.
        <module name="RedundantThrows">
            <property name="logLoadErrors" value="true"/>
            <property name="suppressLoadErrors" value="true"/>
        </module>
        -->

        <!-- Checks for overly complicated boolean expressions.
             Currently finds code like  if (b == true), b || true, !false, etc.
             Rationale: Complex boolean logic makes code hard to understand and maintain. -->
        <module name="SimplifyBooleanExpression"/>

        <!--  Checks for overly complicated boolean return statements. For example the following code
           if (valid())
              return false;
           else
              return true;
           could be written as
              return !valid();
           The Idea for this Check has been shamelessly stolen from the equivalent PMD rule. -->
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks that a class which has only private constructors is declared as final. -->
        <module name="FinalClass"/>

        <!-- Make sure that utility classes (classes that contain only static methods or fields in their API)
             do not have a public constructor.
             Rationale: Instantiating utility classes does not make sense. Hence the constructors should
                        either be private or (if you want to allow subclassing) protected. A common mistake
                        is forgetting to hide the default constructor.
                        If you make the constructor protected you may want to consider the following
                        constructor implementation technique to disallow instantiating subclasses:

                        public class StringUtils { // not final to allow subclassing
                            protected StringUtils() {
                                throw new UnsupportedOperationException(); // prevents calls from subclass
                            }

                            public static int count(char c, String s) {
                                // ...
                            }
                        }
            <module name="HideUtilityClassConstructor"/>
       -->

        <!-- Checks visibility of class members. Only static final members may be public;
             other class members must be private unless property protectedAllowed or packageAllowed is set.
             Public members are not flagged if the name matches the public member regular expression
             (contains "^serialVersionUID$" by default).
             Note: Checkstyle 2 used to include "^f[A-Z][a-zA-Z0-9]*$" in the default pattern to allow CMP
             for EJB 1.1 with the default settings. With EJB 2.0 it is not longer necessary to have public
             access for persistent fields, hence the default has been changed.
             Rationale: Enforce encapsulation. -->
        <module name="VisibilityModifier"/>

        <!-- only one variable in each line -->
        <module name="MultipleVariableDeclarations"/>

        <!-- Checks the style of array type definitions. Some like Java-style:
             public static void main(String[] args) and some like C-style:
             public static void main(String args[]) -->
        <module name="ArrayTypeStyle"/>

        <!-- Checks that there are no "magic numbers", where a magic number is a numeric literal that is
             not defined as a constant. By default, -1, 0, 1, and 2 are not considered to be magic numbers.
        <module name="MagicNumber" />
        -->

        <!-- A check for Todo: comments. Actually it is a generic regular expression matcher on Java comments.
            To check for other patterns in Java comments, set property format.
         -->
        <module name="TodoComment"/>

        <!-- Checks that long constants are defined with an upper ell. That is ' L' and not 'l'.
             This is in accordance to the Java Language Specification,  Section 3.10.1. looks a lot like 1. -->
        <module name="UpperEll"/>

        <!-- Checks that switch statement has "default" clause.
             Rationale: It's usually a good idea to introduce a default case in every switch statement.
             Even if the developer is sure that all currently possible cases are covered, this should be
             expressed in the default branch,
             e.g. by using an assertion. This way the code is protected aginst later changes,
             e.g. introduction of new types in an enumeration type. -->
        <module name="MissingSwitchDefault"/>

        <!-- Check if can out of switch statement by return、break、throw、continue -->
        <module name="FallThrough"/>

        <!-- Checks the number of parameters of a method or constructor. max default 7. -->
        <module name="ParameterNumber">
            <property name="max" value="5"/>
        </module>

        <!-- Max characters in each line-->
        <module name="LineLength">
            <property name="max" value="200"/>
        </module>

        <!-- Checks for long methods and constructors. max default 150. max=300 -->
        <module name="MethodLength">
            <property name="max" value="300"/>
        </module>

        <!-- Check order of modifier,
             default order is: public,protected,private,abstract,static,final,transient,
             volatile,synchronized,native -->
        <module name="ModifierOrder"/>

        <!-- Check the useless modifier  -->
        <module name="RedundantModifier"/>

        <!--- Use equals to compare to strings-->
        <module name="StringLiteralEquality"/>

        <!-- if-else depth -->
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>

        <!-- try-catch depth -->
        <module name="NestedTryDepth">
            <property name="max" value="2"/>
        </module>

        <!-- The count of return -->
        <module name="ReturnCount">
            <property name="max" value="5"/>
            <property name="format" value="^$"/>
        </module>
    </module>
</module>